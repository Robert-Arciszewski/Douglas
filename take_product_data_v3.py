import os
import csv
import re
import requests
from pathlib import Path
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font

def slugify(text: str, max_length=100) -> str:
    text = text.lower()
    text = re.sub(r"[^\w\s-]", "", text)
    text = re.sub(r"[\s_]+", "-", text)
    return text.strip("-")[:max_length]

def download_image(url: str, path: Path):
    if not url:
        return ""
    try:
        img_data = requests.get(url).content
        with open(path, 'wb') as handler:
            handler.write(img_data)
        return path.name
    except Exception as e:
        print(f"❌ Błąd pobierania zdjęcia: {url} -> {e}")
        return ""

# Konfiguracja
product_ids = [
"5011448006", "5010521316", "5010360011", "5010278019", "5010279036", "5010519566", "5010626008", "5010278030", "5011324004", "5011448005", "5011260046", "5010824234", "5010278028", "5011360007", "5010519156", "5010279052", "5010278027", "5011448007", "5010824238", "5011448025", "5011460030", "5011460026", "5011260048", "5010515794", "5011079019", "5011460029", "5011460027", "5010520921", "5010631002", "5011448010", "5010278024", "5010279049", "5010278025", "5011460025", "5011460031", "5011460028", "5011448009", "5010864004", "5010549029", "5010619015", "5010619016", "5010549068", "5010549009", "5010549054", "5010549037", "5010549031", "5010549032", "5010549021", "5010549022", "5010549006", "5010549080", "5010549077", "5010549073", "5010549075", "5010549069", "5010549067", "5010549066", "5010549010", "5010549028", "5010549076", "5010549064", "5010619018", "5010549034", "5010549035", "5010549027", "5010549072", "5010549058", "5010549056", "5010549045", "5010549047", "5010415060", "5010407006", "5010360008", "5010360006", "5010348020", "5002298090", "5002298061", "5002298060", "5002298059", "5002298058", "5002298057", "5010466101", "5010466095", "5010466077", "5010466099", "5011476834", "5010466096", "5010466098", "5010466092", "5010466109", "5010466115", "5010466086", "5011476807", "5010466079", "5010942028", "5010466116", "5010466094", "5010466080", "5010466073", "5010937133", "5011481175", "5011476833", "5011481176", "5010956128", "5011454143", "5010466105", "5011481177", "5010466100", "5010466107", "5010937128", "5010466093", "5011481178", "5010937127", "5011481181", "5011521180", "5010466102", "5010466114", "5010937132", "5010937131", "5010466090", "5010466091", "5010466097", "5010937126", "5010466082", "5011476900", "5010466088", "5010466113", "5010466104", "5010466103", "3001032803", "3001029493", "3001038113", "3001004719", "3001038259", "5010475010", "5010478001", "5010517132", "5010711186", "5010711188", "5010711189", "5010478007", "5010711181", "5010478004", "5010711130", "5010711184", "5010475011", "5010475024", "5010711196", "5010711198", "5010475013", "5010711185", "5010475023", "5010478008", "5010737162", "5010711162", "5010478037", "5010711163", "5010711180", "5010737166", "5010711203", "5010711201", "5010711199", "5010711195", "5010711190", "5010711187", "5010711183", "5010711178", "5010711177", "5010475024", "5010475013", "5010478008", "5010478037", "m000926009", "m000926051", "m000171386", "m000925122", "m000925110", "m000925131", "m000925116", "m000926062", "m000926059", "m000926057", "m000926048", "m000926042", "m000926027", "m000926014", "m000926073", "m000926050", "m000780857", "m000780837", "m000780833", "m000780797", "m000780751", "m000780738", "m000780718", "m000780711", "m000780710", "m000607419", "m000607045", "m000497015", "m000312548", "m000312183", "m000171515", "m000171507", "m000171504", "m000171479", "m000171462", "m000171451", "m000171421", "m000171372", "m000171326", "m000171294", "m000171443", "m000171427", "5010345005", "5009082024", "5010078334", "5010346005", "5009980005", "5009082020", "5010509052", "5009082016", "5010071176", "5009980008", "5011242033", "5009082028", "5010380036", "5010426150", "5011242029", "5009980016", "5010346014", "5010070291", "5010344008", "5010614049", "5010345007", "5010346016", "5010380039", "5010346013", "5010380049", "5010815190", "5009980015", "5010344007", "5010380037", "5010346008", "5009082018", "5010420073", "5010420077", "5010509053", "5009980006", "5010352553", "5010420079", "5010346010", "5010346012", "5010420062", "5011500008", "5009082027", "5009980017", "5009082026", "5010380040", "5010071557", "5010345015", "5009082021", "5011716056", "5011716058", "5011716052", "5011716060", "5011716059", "5011716057", "5011716055", "5011716062", "5011716061", "5011716051", "5011716053", "5011716054", "5011548092", "5011548087", "5011548088", "3001001881", "5011548085", "5011548093", "3001043808", "3000070316", "5010072699", "3001028938", "5011716062", "3001043809", "3001001884", "5010686057", "5009924012", "3000070317", "5011548086", "5010590019", "5011349002", "5001768818", "3001028932", "3001017090", "5011548090", "5000133069", "5011716052", "5011548091", "3000021207", "3001040255", "3001043990", "5010587081", "5010597139", "3001033836", "5010911020", "5010590038", "5010580055", "5010590036", "5010466046", "3001048645", "5010072693", "5010746083", "3000021206", "5011413007", "5010751005", "5010597142", "5010252010", "3001040256", "5010632116", "5010590034", "m001945278", "m001785002", "m001783004", "m001832021", "m002001129", "m001795461", "m001832146", "m001583087", "m001833100", "m001539200", "m001945270", "m001632016", "m001632038", "m001538123", "m001337004", "m001632025", "m001344040", "m001945266", "m001999212", "m000950708", "m001632017", "m000863052", "m001999265", "m001945257", "m001882041", "m001533714", "m001816270", "m000950671", "m000614166", "m000614101", "m002001081", "m001288288", "m001291037", "m001021001", "m002001116", "m001632057", "m000595033", "m001523035", "m000788164", "m001632061", "m001945276", "m001833099", "m001999262", "m001632044", "m001999193", "m001999219", "m000950789", "m001999255", "5010518192", "5010643104", "5010518193", "5010481001", "5003427000", "5003405025", "5003405024", "5003405018", "5003405015", "5003403035", "5003403034", "m001344055", "m001344051", "m001344067", "m001581040", "m001539215", "m001539193", "m001581031", "m001385037", "m001365005", "m001346193", "m001346103", "m001344039", "3001010758", "3000061304", "m002068012", "5011544163", "3000050318", "m002068009", "5011548065", "5011548068", "5011544165", "5011544167", "3000067681", "5010067245", "5003283061", "5009296031", "5002487275", "5010975031", "5010919033", "5009296030", "1012624304", "1012607304", "5009299013", "5010944066", "5010226004", "5010218075", "5010835172", "5010218068", "5011406244", "5011284582", "5010067243", "5002487277", "5010067475", "3000063460", "5010067078", "5010076101", "5010489020", "3001047518", "3001051331", "5011142037", "5010452084", "5011499048", "3000065924", "3000054366", "5010687004", "5010791248", "5010396059", "5010464018", "5010637000", "3000063461", "3001046333", "5010067012", "3000051643", "5010687005", "5010865218", "3001046346", "m002078178", "5002325004", "5010687011", "3001046340", "3001030275", "5011324002", "5010076115", "5010687003", "5010076114", "3001009941", "5010791246", "5010868184", "5002325006", "3001046339", "m002261118", "5010881017", "5010865217", "5010687001", "5010608015", "5010412045", "5010067055", "5010067020", "5010067077", "5010067016", "5009178022", "5009178021", "5009178023", "5009178017", "5009178027", "5009178026", "m001477052", "m001930011", "m001932048", "m001930006", "m001930008", "m001932057", "m001932053", "m001477051", "m001477043", "m001477042", "5010542244", "5010542260", "5010542261", "5010542246", "5010542267", "5011036010", "5010542265", "5010542115", "5010542263", "5010542223", "5011036009", "5010542266", "5010542225", "5010542224", "5010542230", "5010542076", "5010542257", "5010542270", "5010542078", "5010542075", "5010542236", "5010542112", "5010542189", "5010542264", "5010542243", "5010542064", "5010542122", "5010542107", "5010542228", "5010542067", "5010542138", "5010542184", "5010542110", "5011036005", "5011036004", "5010542063", "5010542071", "5010542060", "5010542065", "5010542240", "5010542088", "5011036002", "5010542268", "5010542134", "5010542102", "5010542141", "5010542248", "5010542239", "5002490861", "5002490864", "5002490865", "3001030560", "5002333008", "5002322012", "5002333009", "5002333001", "5002333003", "5002322008", "5010434209", "5009734107", "5009734104", "5009734101", "5009734098", "5009734097", "5009734096", "5009734095", "5010534047", "5010534042", "5010534048", "3001027259", "5011502020", "5011502019", "5011502018", "5011389004", "5010633014", "3001055662", "5011093027", "3001053926", "5011436048", "5010352706", "5011329012", "5011502021", "5011498070", "5011438026", "5011329011", "5011329010", "5011318046", "5011318048", "5011318047", "5011318044", "5011318043", "5011302005", "5011179009", "5011093026", "5011093030", "5010669003", "5010633017", "5010633022", "5010633026", "5010633016", "5010636104", "5010633038", "5010352705", "5010352949", "5010184028", "5003216056", "5000983003", "5000004019", "3001055666", "3001052159", "3001053923", "5010633018", "5010633020", "5010636106", "5010601017", "5010601019", "3001055667", "3001053929", "5010711030", "5010711035", "5010711044", "5010711047", "5010711037", "5002579433", "5002591029", "5002579434", "5003563034", "5002579427", "5003563021", "5009311032", "5002579486", "5009082041", "5009311030", "5002579431", "5003495060", "5003405078", "5009311044", "5003405080", "5003563031", "5002591024", "5009311021", "5002579422", "5009481006", "5003405079", "5009311050", "5009481005", "5009311048", "5009311045", "5009311043", "5009311042", "5009311041", "5009311040", "5009311039", "5009311031", "5009311024", "5009311019", "5009311016", "5009311010", "5009311029", "5009082032", "5009082029", "5003703005", "5003405072", "5003517019", "5003495061", "5002579418", "5002579038", "5011383040", "5011383035", "5011383039", "5011383032", "5011383031", "5011383030", "5011383033", "5011383038", "5011383036", "m001676154", "5009849060", "5009853021", "5009853037", "5009863025", "5009847058", "5009853035", "5009853058", "5009847041", "5009863014", "5009863031", "5010509076", "5010509071", "5010509066", "5009853018", "5009849051", "5010675007", "5010675008", "5010566014", "5010572050", "5010572059", "5011497199", "5010675024", "5010572062", "5010572060", "5010675016", "5010572051", "5010675003", "5010572069", "5010572068", "5010675004", "5011497204", "5011497202", "5011166650", "5010572053", "5010572052", "5010572049", "5010572048", "5010675022", "5010675014", "5010675013", "5010675015", "5010572064", "5010675005", "5010675006", "5010568008", "5010566022", "5010572063", "5010675001", "5010675002", "5010572057", "5010675009", "5010568007", "5010675023", "5010572056", "5010572065", "5010572054", "5010572066", "3001042775", "5002486893", "3001050507", "5009082036", "3001035758", "5011141048", "5009082034", "5009082037", "3001042773", "5010390019", "5010075425", "m000575212", "3001016627", "5010075433", "3001042778", "3001016630", "5009143012", "3001055812", "5009986052", "5010390056", "5011326047", "5010380065", "5011378017", "5011299037", "5010614063", "5010390058", "5010218928", "5010218931", "5009082033", "5010614043", "3001042772", "5011378016", "5010390047", "m001914112", "m001925280", "m002159352", "m001911133", "m001914178", "m001914176", "m001914172", "m001914160", "m001914133", "m001914127", "m001914116", "m001914108", "m001914110", "5010843100", "5010843099", "5010843082", "5010843093", "5010843096", "5010843084", "5010843087", "5011580041", "5010843090", "5010843079", "5010843094", "5010843080", "5011580040", "5011580042", "5010843095", "5010843086", "5010843097", "5010843083", "5010843085", "5010843106", "5010843098", "5010843088", "5010843081", "5010843104", "5010843103", "5010843102", "5010843101", "5010843105", "5011572063", "5011572064", "5011572067", "5011572065", "5011572066", "5011572068", "5010554119", "5010491071", "5010029028", "5010464016", "5010464015", "5010029034", "5010029032", "5010029027", "5010029033", "5010460209", "5010029035", "5010418018", "5010418021", "5010418019", "5010418026", "5010418025", "5010418022", "5010418020", "5010418023", "5010418024", "5010415023", "5010415021", "5010415022", "5010029029", "5010907085", "5010907111", "5010907099", "5010907113", "5010907094", "5010907106", "5010907109", "5010907100", "5010907103", "5010826129", "5011356002", "5010900147", "5010903163", "5010706004", "5010653124", "5001699056", "3001049331", "5010788045", "5010788044", "5010073165", "5010073627", "5010073640", "5003495090", "5010886026", "5011539222", "5011539192", "5011539111", "5011131024", "5011075063", "5010906048", "5002556040", "5002556042", "5010075582", "3000050099", "5002556018", "3011043634", "3011043679", "3011043635", "5002556020", "5010075579", "3000073126", "3000055417", "5009921032", "5002559034", "5002559033", "5002559032", "5002556061", "5002556054", "5002556045", "5002556037", "5002556035", "5002556026", "5002556021", "3000044765", "3011043629", "3011043686", "3011043684", "3011043680", "3011043685", "3011043689", "3011043688", "3011043681", "3011043682", "3011043683", "3011043678", "3001043320", "3000044768", "3000041436", "5002484484", "3000041431", "3000041433", "5011621043", "3000041432", "3000041439", "3000041437", "5002484501", "5002484475", "3001045352", "3001011281", "3000041435", "3000041441", "3000041442", "3000041434", "3000069579", "3001045431", "3001045432", "3001045429", "5009941056", "3001011298", "m002076095", "5010679047", "5002537008", "5002436002", "5002436000", "5002225034", "5002218004", "5002223030", "5002218017", "m002256071", "m002256035", "5011151021", "5010918101", "5010918103", "5010918098", "5010918102", "5010030009", "5010030006", "5009960053", "5002560069", "5002225031", "5002225027", "5002225012", "5002225008", "5002225006", "5002225005", "5002225004", "5002225003", "5002218014", "5002218003", "5002218002", "5002218000", "5002218001", "5002197009", "5002197006", "5002197001", "5010397031", "5010030010", "5010030007", "5010030004", "5010030008", "5002560061", "5002395028", "5002225049", "5002225048", "5002225046", "5002225039", "5002225017", "5002225010", "5002225009", "5002223037", "5002223035", "5002218013", "5010571080", "5010618006", "5009766063", "5010618009", "5010618007", "5010618015", "5010618014", "5002489783", "5010618013", "5010618005", "5010618011", "5010618010", "5010618012", "5010618021", "5010618024", "5010618018", "5010516092", "5010820012", "5010808105", "5010808170", "5010808173", "5010808172", "5010808171", "5010808165", "5010808104", "5010808106", "m000452184", "m000332568", "5011643010", "5011201012", "5010559037", "5011035066", "5010563007"

]  # ← Zamień na swoją listę
headers = {
    "Accept": "application/json",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
}

base_dir = Path().resolve()
csv_filename = base_dir / "21_douglas.csv"
xlsx_filename = base_dir / "21_douglas.xlsx"
images_root_dir = base_dir / "douglas_21"
images_root_dir.mkdir(exist_ok=True)
raw_dir = base_dir / "raw_responses"
raw_dir.mkdir(exist_ok=True)

base_fieldnames = [
    "Brand", "Product Name", "Product Family", "Variant Name", "Price", "Volume",
    "Description", "Application", "Ingredients", "Warnings", "Bullet Points",
    "Breadcrumbs", "Variant Image (Preview)", "Swatch Path", "Main Image", "Main Image (Gray)",
    "All Images", "Manufacturer Info"
]

all_rows = []
image_column_names = set()

for product_id in product_ids:
    url = f"https://www.douglas.pl/api/v2/products/{product_id}?fields=FULL"
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
    except Exception as e:
        print(f"❌ Błąd przy ID: {product_id} – {e}")
        continue

    product_data = response.json()
    variants = product_data.get("variantOptions", [])
    brand = product_data.get("brand", {}).get("name", "")
    brand_line = product_data.get("brandLine", {}).get("name", "")
    base_name = product_data.get("baseProductName", "")
    categories = product_data.get("categories", [])
    breadcrumb_str = " > ".join(f'{c.get("name", "")} ({c.get("url", "")})' for c in categories)

    brand_dir = images_root_dir / slugify(brand)
    brand_dir.mkdir(parents=True, exist_ok=True)

    for variant in variants:
        variant_name = variant.get("variantName", "")
        full_variant_name = f"{brand_line} {base_name} {variant_name}".strip()
        variant_slug = slugify(full_variant_name)
        variant_dir = brand_dir / variant_slug
        variant_dir.mkdir(parents=True, exist_ok=True)

        swatch_url = variant.get("previewImage", {}).get("url", "")
        swatch_path = variant_dir / f"{variant_slug}_swatch.jpg"
        swatch_file_name = download_image(swatch_url, swatch_path)

        images = variant.get("images", [])
        image_urls = []
        image_file_names = []

        if images:
            main_url = images[0]["url"]
            main_path = variant_dir / f"{variant_slug}_0.jpg"
            main_file = download_image(main_url, main_path)
            image_urls.append(main_url)
            image_file_names.append(main_file)

            gray_url = f"{main_url}&grid=true&imPolicy=grayScaled"
            gray_path = variant_dir / f"{variant_slug}_1.jpg"
            gray_file = download_image(gray_url, gray_path)
            image_urls.append(gray_url)
            image_file_names.append(gray_file)

            for i, img in enumerate(images[1:], start=2):
                img_url = img["url"]
                img_path = variant_dir / f"{variant_slug}_{i}.jpg"
                img_file_name = download_image(img_url, img_path)
                image_urls.append(img_url)
                image_file_names.append(img_file_name)

        manuf = variant.get("manufacturerAddress", {})
        manuf_address = ", ".join(filter(None, [
            manuf.get("street", ""), manuf.get("postalCode", ""),
            manuf.get("city", ""), manuf.get("country", "")
        ]))
        manufacturer_info = ", ".join(filter(None, [
            manuf.get("company", ""), manuf_address, manuf.get("webContactInformation", "")
        ])) if manuf else ""

        row = {
            "Brand": brand,
            "Product Name": f"{brand_line} {base_name}".strip(),
            "Product Family": product_data.get("productFamily", {}).get("name", ""),
            "Variant Name": variant_name,
            "Price": variant.get("priceData", {}).get("formattedValue", ""),
            "Volume": f"{variant.get('numberContentUnits', '')} {variant.get('contentUnitOfBaseNumberContentUnits', '')}",
            "Description": product_data.get("description", ""),
            "Application": product_data.get("application", ""),
            "Ingredients": product_data.get("ingredients", ""),
            "Warnings": ", ".join(variant.get("safetyInformationCodes", [])),
            "Bullet Points": " | ".join(product_data.get("bulletPoints", [])),
            "Breadcrumbs": breadcrumb_str,
            "Variant Image (Preview)": swatch_url,
            "Swatch Path": swatch_file_name,
            "Main Image": image_file_names[0] if image_file_names else "",
            "Main Image (Gray)": image_file_names[1] if len(image_file_names) > 1 else "",
            "All Images": " | ".join(image_urls),
            "Manufacturer Info": manufacturer_info
        }

        for idx, fname in enumerate(image_file_names):
            col = f"Image {idx+1}"
            row[col] = fname
            image_column_names.add(col)

        all_rows.append(row)

    print(f"✅ Dodano {len(variants)} wariantów z ID: {product_id}")

# Finalne kolumny
final_fieldnames = base_fieldnames + sorted(image_column_names)

# Zapis do CSV
with open(csv_filename, "w", newline='', encoding="utf-8") as csv_file:
    writer = csv.DictWriter(csv_file, fieldnames=final_fieldnames)
    writer.writeheader()
    writer.writerows(all_rows)

print("✅ Zapisano CSV. Generuję XLSX z hiperlinkami...")

# Zapis do XLSX
df = pd.read_csv(csv_filename, encoding="utf-8")
df.to_excel(xlsx_filename, index=False)

# Mapowanie nazw plików → ścieżki
image_path_map = {
    p.name: p.relative_to(base_dir).as_posix()
    for p in images_root_dir.rglob("*.jpg")
}

# Dodawanie hyperlinków
wb = load_workbook(xlsx_filename)
ws = wb.active
link_font = Font(color="0000FF", underline="single")
col_map = {cell.value: cell.column for cell in ws[1] if cell.value}

for row in range(2, ws.max_row + 1):
    for col_name, col_idx in col_map.items():
        if col_name.startswith("Image ") or col_name in ["Swatch Path", "Main Image", "Main Image (Gray)"]:
            cell = ws.cell(row=row, column=col_idx)
            file = cell.value
            if file and isinstance(file, str):
                relative_path = image_path_map.get(file)
                if relative_path:
                    cell.hyperlink = relative_path
                    cell.font = link_font

wb.save(xlsx_filename)
print(f"✅ Gotowe: {xlsx_filename.name}")
